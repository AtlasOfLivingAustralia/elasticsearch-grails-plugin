The plugin provides 2 ways to send search requests.
* You can use the @elasticSearchService@ and its public @search@ method for cross-domain searching, meaning that ElasticSearch
may analyze multiple indices and return hits of different types (=different domains).
{code}
def res = elasticSearchService.search("${params.query}")
// 'res' search results may contains multiple types of results
{code}
* You can use the injected dynamic method in the domain for domain-specific searching.
{code}
def res = Tweet.search("${params.query}")
// 'res' search results contains only Tweet instances
{code}

These search methods return a @Map@ containing 2 entries:
* a @total@ entry, representing the total number of hits found
* a @searchResults@ entry, containing the hits

*Example*
{code}
def res = Tweet.search("${params.query}")
println "Found ${res.total} result(s)"
res.searchResults.each {
    println it.message
}

def res = elasticSearchService.search("${params.query}")
println "Found ${res.total} result(s)"
res.searchResults.each {
    if(it instanceof Tweet) {
        println it.message
    } else {
        println it.toString()
    }
}
{code}

h3. String query
The search method injected in the domain or the @ElasticSearchService@ has multiple signature available.
You can pass it a simple @String@ to compute your search request. That string will be parsed by the *Lucene query parser*
so feel free to use its syntax to do more specific search query.

You can find out about the syntax on the [Apache Lucene website|http://lucene.apache.org/java/3_0_3/queryparsersyntax.html].

h3. Closure Query DSL


h3. Highlighting
